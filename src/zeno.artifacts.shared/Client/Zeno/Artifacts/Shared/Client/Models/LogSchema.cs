// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Zeno.Artifacts.Shared.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class LogSchema : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Account character.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Account { get; set; }
#nullable restore
#else
        public string Account { get; set; }
#endif
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Character name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Character { get; set; }
#nullable restore
#else
        public string Character { get; set; }
#endif
        /// <summary>Content of action.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public UntypedNode? Content { get; set; }
#nullable restore
#else
        public UntypedNode Content { get; set; }
#endif
        /// <summary>Cooldown in seconds.</summary>
        public int? Cooldown { get; set; }
        /// <summary>Datetime of cooldown expiration.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Zeno.Artifacts.Shared.Client.Models.LogSchema.LogSchema_cooldown_expiration? CooldownExpiration { get; set; }
#nullable restore
#else
        public global::Zeno.Artifacts.Shared.Client.Models.LogSchema.LogSchema_cooldown_expiration CooldownExpiration { get; set; }
#endif
        /// <summary>Datetime of creation.</summary>
        public DateTimeOffset? CreatedAt { get; set; }
        /// <summary>Description of action.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>Type of action.</summary>
        public global::Zeno.Artifacts.Shared.Client.Models.LogType? Type { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Zeno.Artifacts.Shared.Client.Models.LogSchema"/> and sets the default values.
        /// </summary>
        public LogSchema()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Zeno.Artifacts.Shared.Client.Models.LogSchema"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Zeno.Artifacts.Shared.Client.Models.LogSchema CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Zeno.Artifacts.Shared.Client.Models.LogSchema();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "account", n => { Account = n.GetStringValue(); } },
                { "character", n => { Character = n.GetStringValue(); } },
                { "content", n => { Content = n.GetObjectValue<UntypedNode>(UntypedNode.CreateFromDiscriminatorValue); } },
                { "cooldown", n => { Cooldown = n.GetIntValue(); } },
                { "cooldown_expiration", n => { CooldownExpiration = n.GetObjectValue<global::Zeno.Artifacts.Shared.Client.Models.LogSchema.LogSchema_cooldown_expiration>(global::Zeno.Artifacts.Shared.Client.Models.LogSchema.LogSchema_cooldown_expiration.CreateFromDiscriminatorValue); } },
                { "created_at", n => { CreatedAt = n.GetDateTimeOffsetValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "type", n => { Type = n.GetEnumValue<global::Zeno.Artifacts.Shared.Client.Models.LogType>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("account", Account);
            writer.WriteStringValue("character", Character);
            writer.WriteObjectValue<UntypedNode>("content", Content);
            writer.WriteIntValue("cooldown", Cooldown);
            writer.WriteObjectValue<global::Zeno.Artifacts.Shared.Client.Models.LogSchema.LogSchema_cooldown_expiration>("cooldown_expiration", CooldownExpiration);
            writer.WriteDateTimeOffsetValue("created_at", CreatedAt);
            writer.WriteStringValue("description", Description);
            writer.WriteEnumValue<global::Zeno.Artifacts.Shared.Client.Models.LogType>("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="DateTimeOffset"/>, <see cref="global::Zeno.Artifacts.Shared.Client.Models.LogSchema_cooldown_expirationMember1"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class LogSchema_cooldown_expiration : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="DateTimeOffset"/></summary>
            public DateTimeOffset? DateTimeOffset { get; set; }
            /// <summary>Composed type representation for type <see cref="global::Zeno.Artifacts.Shared.Client.Models.LogSchema_cooldown_expirationMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Zeno.Artifacts.Shared.Client.Models.LogSchema_cooldown_expirationMember1? LogSchemaCooldownExpirationMember1 { get; set; }
#nullable restore
#else
            public global::Zeno.Artifacts.Shared.Client.Models.LogSchema_cooldown_expirationMember1 LogSchemaCooldownExpirationMember1 { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Zeno.Artifacts.Shared.Client.Models.LogSchema.LogSchema_cooldown_expiration"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Zeno.Artifacts.Shared.Client.Models.LogSchema.LogSchema_cooldown_expiration CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Zeno.Artifacts.Shared.Client.Models.LogSchema.LogSchema_cooldown_expiration();
                if(parseNode.GetDateTimeOffsetValue() is DateTimeOffset dateTimeOffsetValue)
                {
                    result.DateTimeOffset = dateTimeOffsetValue;
                }
                else {
                    result.LogSchemaCooldownExpirationMember1 = new global::Zeno.Artifacts.Shared.Client.Models.LogSchema_cooldown_expirationMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(LogSchemaCooldownExpirationMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(LogSchemaCooldownExpirationMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(DateTimeOffset != null)
                {
                    writer.WriteDateTimeOffsetValue(null, DateTimeOffset);
                }
                else {
                    writer.WriteObjectValue<global::Zeno.Artifacts.Shared.Client.Models.LogSchema_cooldown_expirationMember1>(null, LogSchemaCooldownExpirationMember1);
                }
            }
        }
    }
}
#pragma warning restore CS0618
