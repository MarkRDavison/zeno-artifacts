// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Zeno.Artifacts.Shared.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ItemSchema : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Item code. This is the item&apos;s unique identifier (ID).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Code { get; set; }
#nullable restore
#else
        public string Code { get; set; }
#endif
        /// <summary>Item conditions. If applicable. Conditions for using or equipping the item.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Zeno.Artifacts.Shared.Client.Models.ConditionSchema>? Conditions { get; set; }
#nullable restore
#else
        public List<global::Zeno.Artifacts.Shared.Client.Models.ConditionSchema> Conditions { get; set; }
#endif
        /// <summary>Craft information. If applicable.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Zeno.Artifacts.Shared.Client.Models.CraftSchema? Craft { get; set; }
#nullable restore
#else
        public global::Zeno.Artifacts.Shared.Client.Models.CraftSchema Craft { get; set; }
#endif
        /// <summary>Item description.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>List of object effects. For equipment, it will include item stats.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Zeno.Artifacts.Shared.Client.Models.SimpleEffectSchema>? Effects { get; set; }
#nullable restore
#else
        public List<global::Zeno.Artifacts.Shared.Client.Models.SimpleEffectSchema> Effects { get; set; }
#endif
        /// <summary>Item level.</summary>
        public int? Level { get; set; }
        /// <summary>Item name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Item subtype.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Subtype { get; set; }
#nullable restore
#else
        public string Subtype { get; set; }
#endif
        /// <summary>Item tradeable status. A non-tradeable item cannot be exchanged or sold.</summary>
        public bool? Tradeable { get; set; }
        /// <summary>Item type.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Type { get; set; }
#nullable restore
#else
        public string Type { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Zeno.Artifacts.Shared.Client.Models.ItemSchema"/> and sets the default values.
        /// </summary>
        public ItemSchema()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Zeno.Artifacts.Shared.Client.Models.ItemSchema"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Zeno.Artifacts.Shared.Client.Models.ItemSchema CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Zeno.Artifacts.Shared.Client.Models.ItemSchema();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "code", n => { Code = n.GetStringValue(); } },
                { "conditions", n => { Conditions = n.GetCollectionOfObjectValues<global::Zeno.Artifacts.Shared.Client.Models.ConditionSchema>(global::Zeno.Artifacts.Shared.Client.Models.ConditionSchema.CreateFromDiscriminatorValue)?.AsList(); } },
                { "craft", n => { Craft = n.GetObjectValue<global::Zeno.Artifacts.Shared.Client.Models.CraftSchema>(global::Zeno.Artifacts.Shared.Client.Models.CraftSchema.CreateFromDiscriminatorValue); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "effects", n => { Effects = n.GetCollectionOfObjectValues<global::Zeno.Artifacts.Shared.Client.Models.SimpleEffectSchema>(global::Zeno.Artifacts.Shared.Client.Models.SimpleEffectSchema.CreateFromDiscriminatorValue)?.AsList(); } },
                { "level", n => { Level = n.GetIntValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "subtype", n => { Subtype = n.GetStringValue(); } },
                { "tradeable", n => { Tradeable = n.GetBoolValue(); } },
                { "type", n => { Type = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("code", Code);
            writer.WriteCollectionOfObjectValues<global::Zeno.Artifacts.Shared.Client.Models.ConditionSchema>("conditions", Conditions);
            writer.WriteObjectValue<global::Zeno.Artifacts.Shared.Client.Models.CraftSchema>("craft", Craft);
            writer.WriteStringValue("description", Description);
            writer.WriteCollectionOfObjectValues<global::Zeno.Artifacts.Shared.Client.Models.SimpleEffectSchema>("effects", Effects);
            writer.WriteIntValue("level", Level);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("subtype", Subtype);
            writer.WriteBoolValue("tradeable", Tradeable);
            writer.WriteStringValue("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
