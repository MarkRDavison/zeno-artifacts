// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Zeno.Artifacts.Shared.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class DataPage_GEOrderSchema_ : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The data property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Zeno.Artifacts.Shared.Client.Models.GEOrderSchema>? Data { get; set; }
#nullable restore
#else
        public List<global::Zeno.Artifacts.Shared.Client.Models.GEOrderSchema> Data { get; set; }
#endif
        /// <summary>The page property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema_.DataPage_GEOrderSchema__page? Page { get; set; }
#nullable restore
#else
        public global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema_.DataPage_GEOrderSchema__page Page { get; set; }
#endif
        /// <summary>The pages property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema_.DataPage_GEOrderSchema__pages? Pages { get; set; }
#nullable restore
#else
        public global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema_.DataPage_GEOrderSchema__pages Pages { get; set; }
#endif
        /// <summary>The size property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema_.DataPage_GEOrderSchema__size? Size { get; set; }
#nullable restore
#else
        public global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema_.DataPage_GEOrderSchema__size Size { get; set; }
#endif
        /// <summary>The total property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema_.DataPage_GEOrderSchema__total? Total { get; set; }
#nullable restore
#else
        public global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema_.DataPage_GEOrderSchema__total Total { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema_"/> and sets the default values.
        /// </summary>
        public DataPage_GEOrderSchema_()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema_"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema_ CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema_();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "data", n => { Data = n.GetCollectionOfObjectValues<global::Zeno.Artifacts.Shared.Client.Models.GEOrderSchema>(global::Zeno.Artifacts.Shared.Client.Models.GEOrderSchema.CreateFromDiscriminatorValue)?.AsList(); } },
                { "page", n => { Page = n.GetObjectValue<global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema_.DataPage_GEOrderSchema__page>(global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema_.DataPage_GEOrderSchema__page.CreateFromDiscriminatorValue); } },
                { "pages", n => { Pages = n.GetObjectValue<global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema_.DataPage_GEOrderSchema__pages>(global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema_.DataPage_GEOrderSchema__pages.CreateFromDiscriminatorValue); } },
                { "size", n => { Size = n.GetObjectValue<global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema_.DataPage_GEOrderSchema__size>(global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema_.DataPage_GEOrderSchema__size.CreateFromDiscriminatorValue); } },
                { "total", n => { Total = n.GetObjectValue<global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema_.DataPage_GEOrderSchema__total>(global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema_.DataPage_GEOrderSchema__total.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::Zeno.Artifacts.Shared.Client.Models.GEOrderSchema>("data", Data);
            writer.WriteObjectValue<global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema_.DataPage_GEOrderSchema__page>("page", Page);
            writer.WriteObjectValue<global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema_.DataPage_GEOrderSchema__pages>("pages", Pages);
            writer.WriteObjectValue<global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema_.DataPage_GEOrderSchema__size>("size", Size);
            writer.WriteObjectValue<global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema_.DataPage_GEOrderSchema__total>("total", Total);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema__pageMember1"/>, <see cref="int"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class DataPage_GEOrderSchema__page : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema__pageMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema__pageMember1? DataPageGEOrderSchemaPageMember1 { get; set; }
#nullable restore
#else
            public global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema__pageMember1 DataPageGEOrderSchemaPageMember1 { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="int"/></summary>
            public int? Integer { get; set; }
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema_.DataPage_GEOrderSchema__page"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema_.DataPage_GEOrderSchema__page CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema_.DataPage_GEOrderSchema__page();
                if(parseNode.GetIntValue() is int integerValue)
                {
                    result.Integer = integerValue;
                }
                else {
                    result.DataPageGEOrderSchemaPageMember1 = new global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema__pageMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(DataPageGEOrderSchemaPageMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(DataPageGEOrderSchemaPageMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(Integer != null)
                {
                    writer.WriteIntValue(null, Integer);
                }
                else {
                    writer.WriteObjectValue<global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema__pageMember1>(null, DataPageGEOrderSchemaPageMember1);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema__pagesMember1"/>, <see cref="int"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class DataPage_GEOrderSchema__pages : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema__pagesMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema__pagesMember1? DataPageGEOrderSchemaPagesMember1 { get; set; }
#nullable restore
#else
            public global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema__pagesMember1 DataPageGEOrderSchemaPagesMember1 { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="int"/></summary>
            public int? Integer { get; set; }
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema_.DataPage_GEOrderSchema__pages"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema_.DataPage_GEOrderSchema__pages CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema_.DataPage_GEOrderSchema__pages();
                if(parseNode.GetIntValue() is int integerValue)
                {
                    result.Integer = integerValue;
                }
                else {
                    result.DataPageGEOrderSchemaPagesMember1 = new global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema__pagesMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(DataPageGEOrderSchemaPagesMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(DataPageGEOrderSchemaPagesMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(Integer != null)
                {
                    writer.WriteIntValue(null, Integer);
                }
                else {
                    writer.WriteObjectValue<global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema__pagesMember1>(null, DataPageGEOrderSchemaPagesMember1);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema__sizeMember1"/>, <see cref="int"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class DataPage_GEOrderSchema__size : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema__sizeMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema__sizeMember1? DataPageGEOrderSchemaSizeMember1 { get; set; }
#nullable restore
#else
            public global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema__sizeMember1 DataPageGEOrderSchemaSizeMember1 { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="int"/></summary>
            public int? Integer { get; set; }
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema_.DataPage_GEOrderSchema__size"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema_.DataPage_GEOrderSchema__size CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema_.DataPage_GEOrderSchema__size();
                if(parseNode.GetIntValue() is int integerValue)
                {
                    result.Integer = integerValue;
                }
                else {
                    result.DataPageGEOrderSchemaSizeMember1 = new global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema__sizeMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(DataPageGEOrderSchemaSizeMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(DataPageGEOrderSchemaSizeMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(Integer != null)
                {
                    writer.WriteIntValue(null, Integer);
                }
                else {
                    writer.WriteObjectValue<global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema__sizeMember1>(null, DataPageGEOrderSchemaSizeMember1);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema__totalMember1"/>, <see cref="int"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class DataPage_GEOrderSchema__total : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema__totalMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema__totalMember1? DataPageGEOrderSchemaTotalMember1 { get; set; }
#nullable restore
#else
            public global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema__totalMember1 DataPageGEOrderSchemaTotalMember1 { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="int"/></summary>
            public int? Integer { get; set; }
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema_.DataPage_GEOrderSchema__total"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema_.DataPage_GEOrderSchema__total CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema_.DataPage_GEOrderSchema__total();
                if(parseNode.GetIntValue() is int integerValue)
                {
                    result.Integer = integerValue;
                }
                else {
                    result.DataPageGEOrderSchemaTotalMember1 = new global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema__totalMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(DataPageGEOrderSchemaTotalMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(DataPageGEOrderSchemaTotalMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(Integer != null)
                {
                    writer.WriteIntValue(null, Integer);
                }
                else {
                    writer.WriteObjectValue<global::Zeno.Artifacts.Shared.Client.Models.DataPage_GEOrderSchema__totalMember1>(null, DataPageGEOrderSchemaTotalMember1);
                }
            }
        }
    }
}
#pragma warning restore CS0618
