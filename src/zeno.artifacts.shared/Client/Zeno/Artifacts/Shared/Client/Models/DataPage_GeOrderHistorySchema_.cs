// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Zeno.Artifacts.Shared.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class DataPage_GeOrderHistorySchema_ : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The data property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Zeno.Artifacts.Shared.Client.Models.GeOrderHistorySchema>? Data { get; set; }
#nullable restore
#else
        public List<global::Zeno.Artifacts.Shared.Client.Models.GeOrderHistorySchema> Data { get; set; }
#endif
        /// <summary>The page property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema_.DataPage_GeOrderHistorySchema__page? Page { get; set; }
#nullable restore
#else
        public global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema_.DataPage_GeOrderHistorySchema__page Page { get; set; }
#endif
        /// <summary>The pages property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema_.DataPage_GeOrderHistorySchema__pages? Pages { get; set; }
#nullable restore
#else
        public global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema_.DataPage_GeOrderHistorySchema__pages Pages { get; set; }
#endif
        /// <summary>The size property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema_.DataPage_GeOrderHistorySchema__size? Size { get; set; }
#nullable restore
#else
        public global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema_.DataPage_GeOrderHistorySchema__size Size { get; set; }
#endif
        /// <summary>The total property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema_.DataPage_GeOrderHistorySchema__total? Total { get; set; }
#nullable restore
#else
        public global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema_.DataPage_GeOrderHistorySchema__total Total { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema_"/> and sets the default values.
        /// </summary>
        public DataPage_GeOrderHistorySchema_()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema_"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema_ CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema_();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "data", n => { Data = n.GetCollectionOfObjectValues<global::Zeno.Artifacts.Shared.Client.Models.GeOrderHistorySchema>(global::Zeno.Artifacts.Shared.Client.Models.GeOrderHistorySchema.CreateFromDiscriminatorValue)?.AsList(); } },
                { "page", n => { Page = n.GetObjectValue<global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema_.DataPage_GeOrderHistorySchema__page>(global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema_.DataPage_GeOrderHistorySchema__page.CreateFromDiscriminatorValue); } },
                { "pages", n => { Pages = n.GetObjectValue<global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema_.DataPage_GeOrderHistorySchema__pages>(global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema_.DataPage_GeOrderHistorySchema__pages.CreateFromDiscriminatorValue); } },
                { "size", n => { Size = n.GetObjectValue<global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema_.DataPage_GeOrderHistorySchema__size>(global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema_.DataPage_GeOrderHistorySchema__size.CreateFromDiscriminatorValue); } },
                { "total", n => { Total = n.GetObjectValue<global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema_.DataPage_GeOrderHistorySchema__total>(global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema_.DataPage_GeOrderHistorySchema__total.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::Zeno.Artifacts.Shared.Client.Models.GeOrderHistorySchema>("data", Data);
            writer.WriteObjectValue<global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema_.DataPage_GeOrderHistorySchema__page>("page", Page);
            writer.WriteObjectValue<global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema_.DataPage_GeOrderHistorySchema__pages>("pages", Pages);
            writer.WriteObjectValue<global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema_.DataPage_GeOrderHistorySchema__size>("size", Size);
            writer.WriteObjectValue<global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema_.DataPage_GeOrderHistorySchema__total>("total", Total);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema__pageMember1"/>, <see cref="int"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class DataPage_GeOrderHistorySchema__page : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema__pageMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema__pageMember1? DataPageGeOrderHistorySchemaPageMember1 { get; set; }
#nullable restore
#else
            public global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema__pageMember1 DataPageGeOrderHistorySchemaPageMember1 { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="int"/></summary>
            public int? Integer { get; set; }
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema_.DataPage_GeOrderHistorySchema__page"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema_.DataPage_GeOrderHistorySchema__page CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema_.DataPage_GeOrderHistorySchema__page();
                if(parseNode.GetIntValue() is int integerValue)
                {
                    result.Integer = integerValue;
                }
                else {
                    result.DataPageGeOrderHistorySchemaPageMember1 = new global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema__pageMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(DataPageGeOrderHistorySchemaPageMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(DataPageGeOrderHistorySchemaPageMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(Integer != null)
                {
                    writer.WriteIntValue(null, Integer);
                }
                else {
                    writer.WriteObjectValue<global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema__pageMember1>(null, DataPageGeOrderHistorySchemaPageMember1);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema__pagesMember1"/>, <see cref="int"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class DataPage_GeOrderHistorySchema__pages : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema__pagesMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema__pagesMember1? DataPageGeOrderHistorySchemaPagesMember1 { get; set; }
#nullable restore
#else
            public global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema__pagesMember1 DataPageGeOrderHistorySchemaPagesMember1 { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="int"/></summary>
            public int? Integer { get; set; }
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema_.DataPage_GeOrderHistorySchema__pages"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema_.DataPage_GeOrderHistorySchema__pages CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema_.DataPage_GeOrderHistorySchema__pages();
                if(parseNode.GetIntValue() is int integerValue)
                {
                    result.Integer = integerValue;
                }
                else {
                    result.DataPageGeOrderHistorySchemaPagesMember1 = new global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema__pagesMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(DataPageGeOrderHistorySchemaPagesMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(DataPageGeOrderHistorySchemaPagesMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(Integer != null)
                {
                    writer.WriteIntValue(null, Integer);
                }
                else {
                    writer.WriteObjectValue<global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema__pagesMember1>(null, DataPageGeOrderHistorySchemaPagesMember1);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema__sizeMember1"/>, <see cref="int"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class DataPage_GeOrderHistorySchema__size : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema__sizeMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema__sizeMember1? DataPageGeOrderHistorySchemaSizeMember1 { get; set; }
#nullable restore
#else
            public global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema__sizeMember1 DataPageGeOrderHistorySchemaSizeMember1 { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="int"/></summary>
            public int? Integer { get; set; }
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema_.DataPage_GeOrderHistorySchema__size"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema_.DataPage_GeOrderHistorySchema__size CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema_.DataPage_GeOrderHistorySchema__size();
                if(parseNode.GetIntValue() is int integerValue)
                {
                    result.Integer = integerValue;
                }
                else {
                    result.DataPageGeOrderHistorySchemaSizeMember1 = new global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema__sizeMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(DataPageGeOrderHistorySchemaSizeMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(DataPageGeOrderHistorySchemaSizeMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(Integer != null)
                {
                    writer.WriteIntValue(null, Integer);
                }
                else {
                    writer.WriteObjectValue<global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema__sizeMember1>(null, DataPageGeOrderHistorySchemaSizeMember1);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema__totalMember1"/>, <see cref="int"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class DataPage_GeOrderHistorySchema__total : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema__totalMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema__totalMember1? DataPageGeOrderHistorySchemaTotalMember1 { get; set; }
#nullable restore
#else
            public global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema__totalMember1 DataPageGeOrderHistorySchemaTotalMember1 { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="int"/></summary>
            public int? Integer { get; set; }
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema_.DataPage_GeOrderHistorySchema__total"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema_.DataPage_GeOrderHistorySchema__total CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema_.DataPage_GeOrderHistorySchema__total();
                if(parseNode.GetIntValue() is int integerValue)
                {
                    result.Integer = integerValue;
                }
                else {
                    result.DataPageGeOrderHistorySchemaTotalMember1 = new global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema__totalMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(DataPageGeOrderHistorySchemaTotalMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(DataPageGeOrderHistorySchemaTotalMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(Integer != null)
                {
                    writer.WriteIntValue(null, Integer);
                }
                else {
                    writer.WriteObjectValue<global::Zeno.Artifacts.Shared.Client.Models.DataPage_GeOrderHistorySchema__totalMember1>(null, DataPageGeOrderHistorySchemaTotalMember1);
                }
            }
        }
    }
}
#pragma warning restore CS0618
