// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Zeno.Artifacts.Shared.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class EventSchema : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Code of the event.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Code { get; set; }
#nullable restore
#else
        public string Code { get; set; }
#endif
        /// <summary>Content of the event.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Zeno.Artifacts.Shared.Client.Models.EventContentSchema? Content { get; set; }
#nullable restore
#else
        public global::Zeno.Artifacts.Shared.Client.Models.EventContentSchema Content { get; set; }
#endif
        /// <summary>Duration in minutes.</summary>
        public int? Duration { get; set; }
        /// <summary>Map list of the event.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Zeno.Artifacts.Shared.Client.Models.EventMapSchema>? Maps { get; set; }
#nullable restore
#else
        public List<global::Zeno.Artifacts.Shared.Client.Models.EventMapSchema> Maps { get; set; }
#endif
        /// <summary>Name of the event.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Rate spawn of the event. (1/rate every minute)</summary>
        public int? Rate { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Zeno.Artifacts.Shared.Client.Models.EventSchema"/> and sets the default values.
        /// </summary>
        public EventSchema()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Zeno.Artifacts.Shared.Client.Models.EventSchema"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Zeno.Artifacts.Shared.Client.Models.EventSchema CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Zeno.Artifacts.Shared.Client.Models.EventSchema();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "code", n => { Code = n.GetStringValue(); } },
                { "content", n => { Content = n.GetObjectValue<global::Zeno.Artifacts.Shared.Client.Models.EventContentSchema>(global::Zeno.Artifacts.Shared.Client.Models.EventContentSchema.CreateFromDiscriminatorValue); } },
                { "duration", n => { Duration = n.GetIntValue(); } },
                { "maps", n => { Maps = n.GetCollectionOfObjectValues<global::Zeno.Artifacts.Shared.Client.Models.EventMapSchema>(global::Zeno.Artifacts.Shared.Client.Models.EventMapSchema.CreateFromDiscriminatorValue)?.AsList(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "rate", n => { Rate = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("code", Code);
            writer.WriteObjectValue<global::Zeno.Artifacts.Shared.Client.Models.EventContentSchema>("content", Content);
            writer.WriteIntValue("duration", Duration);
            writer.WriteCollectionOfObjectValues<global::Zeno.Artifacts.Shared.Client.Models.EventMapSchema>("maps", Maps);
            writer.WriteStringValue("name", Name);
            writer.WriteIntValue("rate", Rate);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
