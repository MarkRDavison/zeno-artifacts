// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Zeno.Artifacts.Shared.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TaskFullSchema : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Task objective.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Code { get; set; }
#nullable restore
#else
        public string Code { get; set; }
#endif
        /// <summary>Task level.</summary>
        public int? Level { get; set; }
        /// <summary>Maximum amount of task.</summary>
        public int? MaxQuantity { get; set; }
        /// <summary>Minimum amount of task.</summary>
        public int? MinQuantity { get; set; }
        /// <summary>Rewards.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Zeno.Artifacts.Shared.Client.Models.RewardsSchema? Rewards { get; set; }
#nullable restore
#else
        public global::Zeno.Artifacts.Shared.Client.Models.RewardsSchema Rewards { get; set; }
#endif
        /// <summary>Skill required to complete the task.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Zeno.Artifacts.Shared.Client.Models.TaskFullSchema.TaskFullSchema_skill? Skill { get; set; }
#nullable restore
#else
        public global::Zeno.Artifacts.Shared.Client.Models.TaskFullSchema.TaskFullSchema_skill Skill { get; set; }
#endif
        /// <summary>The type of task.</summary>
        public global::Zeno.Artifacts.Shared.Client.Models.TaskType? Type { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Zeno.Artifacts.Shared.Client.Models.TaskFullSchema"/> and sets the default values.
        /// </summary>
        public TaskFullSchema()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Zeno.Artifacts.Shared.Client.Models.TaskFullSchema"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Zeno.Artifacts.Shared.Client.Models.TaskFullSchema CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Zeno.Artifacts.Shared.Client.Models.TaskFullSchema();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "code", n => { Code = n.GetStringValue(); } },
                { "level", n => { Level = n.GetIntValue(); } },
                { "max_quantity", n => { MaxQuantity = n.GetIntValue(); } },
                { "min_quantity", n => { MinQuantity = n.GetIntValue(); } },
                { "rewards", n => { Rewards = n.GetObjectValue<global::Zeno.Artifacts.Shared.Client.Models.RewardsSchema>(global::Zeno.Artifacts.Shared.Client.Models.RewardsSchema.CreateFromDiscriminatorValue); } },
                { "skill", n => { Skill = n.GetObjectValue<global::Zeno.Artifacts.Shared.Client.Models.TaskFullSchema.TaskFullSchema_skill>(global::Zeno.Artifacts.Shared.Client.Models.TaskFullSchema.TaskFullSchema_skill.CreateFromDiscriminatorValue); } },
                { "type", n => { Type = n.GetEnumValue<global::Zeno.Artifacts.Shared.Client.Models.TaskType>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("code", Code);
            writer.WriteIntValue("level", Level);
            writer.WriteIntValue("max_quantity", MaxQuantity);
            writer.WriteIntValue("min_quantity", MinQuantity);
            writer.WriteObjectValue<global::Zeno.Artifacts.Shared.Client.Models.RewardsSchema>("rewards", Rewards);
            writer.WriteObjectValue<global::Zeno.Artifacts.Shared.Client.Models.TaskFullSchema.TaskFullSchema_skill>("skill", Skill);
            writer.WriteEnumValue<global::Zeno.Artifacts.Shared.Client.Models.TaskType>("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Zeno.Artifacts.Shared.Client.Models.TaskFullSchema_skillMember1"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class TaskFullSchema_skill : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="global::Zeno.Artifacts.Shared.Client.Models.TaskFullSchema_skillMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Zeno.Artifacts.Shared.Client.Models.TaskFullSchema_skillMember1? TaskFullSchemaSkillMember1 { get; set; }
#nullable restore
#else
            public global::Zeno.Artifacts.Shared.Client.Models.TaskFullSchema_skillMember1 TaskFullSchemaSkillMember1 { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Zeno.Artifacts.Shared.Client.Models.TaskFullSchema.TaskFullSchema_skill"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Zeno.Artifacts.Shared.Client.Models.TaskFullSchema.TaskFullSchema_skill CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Zeno.Artifacts.Shared.Client.Models.TaskFullSchema.TaskFullSchema_skill();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.TaskFullSchemaSkillMember1 = new global::Zeno.Artifacts.Shared.Client.Models.TaskFullSchema_skillMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(TaskFullSchemaSkillMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(TaskFullSchemaSkillMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Zeno.Artifacts.Shared.Client.Models.TaskFullSchema_skillMember1>(null, TaskFullSchemaSkillMember1);
                }
            }
        }
    }
}
#pragma warning restore CS0618
