// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Zeno.Artifacts.Shared.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class NPCItem : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Price to buy the item.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Zeno.Artifacts.Shared.Client.Models.NPCItem.NPCItem_buy_price? BuyPrice { get; set; }
#nullable restore
#else
        public global::Zeno.Artifacts.Shared.Client.Models.NPCItem.NPCItem_buy_price BuyPrice { get; set; }
#endif
        /// <summary>The code of the NPC. This is the NPC&apos;s unique identifier (ID).</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Code { get; set; }
#nullable restore
#else
        public string Code { get; set; }
#endif
        /// <summary>Currency used to buy/sell the item. If it&apos;s not gold, it&apos;s the item code.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Currency { get; set; }
#nullable restore
#else
        public string Currency { get; set; }
#endif
        /// <summary>Code of the NPC that sells/buys the item.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Npc { get; set; }
#nullable restore
#else
        public string Npc { get; set; }
#endif
        /// <summary>Price to sell the item.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Zeno.Artifacts.Shared.Client.Models.NPCItem.NPCItem_sell_price? SellPrice { get; set; }
#nullable restore
#else
        public global::Zeno.Artifacts.Shared.Client.Models.NPCItem.NPCItem_sell_price SellPrice { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Zeno.Artifacts.Shared.Client.Models.NPCItem"/> and sets the default values.
        /// </summary>
        public NPCItem()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Zeno.Artifacts.Shared.Client.Models.NPCItem"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Zeno.Artifacts.Shared.Client.Models.NPCItem CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Zeno.Artifacts.Shared.Client.Models.NPCItem();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "buy_price", n => { BuyPrice = n.GetObjectValue<global::Zeno.Artifacts.Shared.Client.Models.NPCItem.NPCItem_buy_price>(global::Zeno.Artifacts.Shared.Client.Models.NPCItem.NPCItem_buy_price.CreateFromDiscriminatorValue); } },
                { "code", n => { Code = n.GetStringValue(); } },
                { "currency", n => { Currency = n.GetStringValue(); } },
                { "npc", n => { Npc = n.GetStringValue(); } },
                { "sell_price", n => { SellPrice = n.GetObjectValue<global::Zeno.Artifacts.Shared.Client.Models.NPCItem.NPCItem_sell_price>(global::Zeno.Artifacts.Shared.Client.Models.NPCItem.NPCItem_sell_price.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Zeno.Artifacts.Shared.Client.Models.NPCItem.NPCItem_buy_price>("buy_price", BuyPrice);
            writer.WriteStringValue("code", Code);
            writer.WriteStringValue("currency", Currency);
            writer.WriteStringValue("npc", Npc);
            writer.WriteObjectValue<global::Zeno.Artifacts.Shared.Client.Models.NPCItem.NPCItem_sell_price>("sell_price", SellPrice);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Zeno.Artifacts.Shared.Client.Models.NPCItem_buy_priceMember1"/>, <see cref="int"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class NPCItem_buy_price : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="int"/></summary>
            public int? Integer { get; set; }
            /// <summary>Composed type representation for type <see cref="global::Zeno.Artifacts.Shared.Client.Models.NPCItem_buy_priceMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Zeno.Artifacts.Shared.Client.Models.NPCItem_buy_priceMember1? NPCItemBuyPriceMember1 { get; set; }
#nullable restore
#else
            public global::Zeno.Artifacts.Shared.Client.Models.NPCItem_buy_priceMember1 NPCItemBuyPriceMember1 { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Zeno.Artifacts.Shared.Client.Models.NPCItem.NPCItem_buy_price"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Zeno.Artifacts.Shared.Client.Models.NPCItem.NPCItem_buy_price CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Zeno.Artifacts.Shared.Client.Models.NPCItem.NPCItem_buy_price();
                if(parseNode.GetIntValue() is int integerValue)
                {
                    result.Integer = integerValue;
                }
                else {
                    result.NPCItemBuyPriceMember1 = new global::Zeno.Artifacts.Shared.Client.Models.NPCItem_buy_priceMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(NPCItemBuyPriceMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(NPCItemBuyPriceMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(Integer != null)
                {
                    writer.WriteIntValue(null, Integer);
                }
                else {
                    writer.WriteObjectValue<global::Zeno.Artifacts.Shared.Client.Models.NPCItem_buy_priceMember1>(null, NPCItemBuyPriceMember1);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Zeno.Artifacts.Shared.Client.Models.NPCItem_sell_priceMember1"/>, <see cref="int"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class NPCItem_sell_price : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="int"/></summary>
            public int? Integer { get; set; }
            /// <summary>Composed type representation for type <see cref="global::Zeno.Artifacts.Shared.Client.Models.NPCItem_sell_priceMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Zeno.Artifacts.Shared.Client.Models.NPCItem_sell_priceMember1? NPCItemSellPriceMember1 { get; set; }
#nullable restore
#else
            public global::Zeno.Artifacts.Shared.Client.Models.NPCItem_sell_priceMember1 NPCItemSellPriceMember1 { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Zeno.Artifacts.Shared.Client.Models.NPCItem.NPCItem_sell_price"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Zeno.Artifacts.Shared.Client.Models.NPCItem.NPCItem_sell_price CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Zeno.Artifacts.Shared.Client.Models.NPCItem.NPCItem_sell_price();
                if(parseNode.GetIntValue() is int integerValue)
                {
                    result.Integer = integerValue;
                }
                else {
                    result.NPCItemSellPriceMember1 = new global::Zeno.Artifacts.Shared.Client.Models.NPCItem_sell_priceMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(NPCItemSellPriceMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(NPCItemSellPriceMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(Integer != null)
                {
                    writer.WriteIntValue(null, Integer);
                }
                else {
                    writer.WriteObjectValue<global::Zeno.Artifacts.Shared.Client.Models.NPCItem_sell_priceMember1>(null, NPCItemSellPriceMember1);
                }
            }
        }
    }
}
#pragma warning restore CS0618
