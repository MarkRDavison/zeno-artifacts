// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Zeno.Artifacts.Shared.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class AccountAchievementSchema : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Code of the achievement. </summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Code { get; set; }
#nullable restore
#else
        public string Code { get; set; }
#endif
        /// <summary>Completed at.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Zeno.Artifacts.Shared.Client.Models.AccountAchievementSchema.AccountAchievementSchema_completed_at? CompletedAt { get; set; }
#nullable restore
#else
        public global::Zeno.Artifacts.Shared.Client.Models.AccountAchievementSchema.AccountAchievementSchema_completed_at CompletedAt { get; set; }
#endif
        /// <summary>Current progress.</summary>
        public int? Current { get; set; }
        /// <summary>Description of the achievement.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Description { get; set; }
#nullable restore
#else
        public string Description { get; set; }
#endif
        /// <summary>Name of the achievement.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>Points of the achievement. Used for the leaderboard.</summary>
        public int? Points { get; set; }
        /// <summary>Rewards.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Zeno.Artifacts.Shared.Client.Models.AchievementRewardsSchema? Rewards { get; set; }
#nullable restore
#else
        public global::Zeno.Artifacts.Shared.Client.Models.AchievementRewardsSchema Rewards { get; set; }
#endif
        /// <summary>Target of the achievement.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Zeno.Artifacts.Shared.Client.Models.AccountAchievementSchema.AccountAchievementSchema_target? Target { get; set; }
#nullable restore
#else
        public global::Zeno.Artifacts.Shared.Client.Models.AccountAchievementSchema.AccountAchievementSchema_target Target { get; set; }
#endif
        /// <summary>Total to do.</summary>
        public int? Total { get; set; }
        /// <summary>Type of achievement.</summary>
        public global::Zeno.Artifacts.Shared.Client.Models.AchievementType? Type { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Zeno.Artifacts.Shared.Client.Models.AccountAchievementSchema"/> and sets the default values.
        /// </summary>
        public AccountAchievementSchema()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Zeno.Artifacts.Shared.Client.Models.AccountAchievementSchema"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Zeno.Artifacts.Shared.Client.Models.AccountAchievementSchema CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Zeno.Artifacts.Shared.Client.Models.AccountAchievementSchema();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "code", n => { Code = n.GetStringValue(); } },
                { "completed_at", n => { CompletedAt = n.GetObjectValue<global::Zeno.Artifacts.Shared.Client.Models.AccountAchievementSchema.AccountAchievementSchema_completed_at>(global::Zeno.Artifacts.Shared.Client.Models.AccountAchievementSchema.AccountAchievementSchema_completed_at.CreateFromDiscriminatorValue); } },
                { "current", n => { Current = n.GetIntValue(); } },
                { "description", n => { Description = n.GetStringValue(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "points", n => { Points = n.GetIntValue(); } },
                { "rewards", n => { Rewards = n.GetObjectValue<global::Zeno.Artifacts.Shared.Client.Models.AchievementRewardsSchema>(global::Zeno.Artifacts.Shared.Client.Models.AchievementRewardsSchema.CreateFromDiscriminatorValue); } },
                { "target", n => { Target = n.GetObjectValue<global::Zeno.Artifacts.Shared.Client.Models.AccountAchievementSchema.AccountAchievementSchema_target>(global::Zeno.Artifacts.Shared.Client.Models.AccountAchievementSchema.AccountAchievementSchema_target.CreateFromDiscriminatorValue); } },
                { "total", n => { Total = n.GetIntValue(); } },
                { "type", n => { Type = n.GetEnumValue<global::Zeno.Artifacts.Shared.Client.Models.AchievementType>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("code", Code);
            writer.WriteObjectValue<global::Zeno.Artifacts.Shared.Client.Models.AccountAchievementSchema.AccountAchievementSchema_completed_at>("completed_at", CompletedAt);
            writer.WriteIntValue("current", Current);
            writer.WriteStringValue("description", Description);
            writer.WriteStringValue("name", Name);
            writer.WriteIntValue("points", Points);
            writer.WriteObjectValue<global::Zeno.Artifacts.Shared.Client.Models.AchievementRewardsSchema>("rewards", Rewards);
            writer.WriteObjectValue<global::Zeno.Artifacts.Shared.Client.Models.AccountAchievementSchema.AccountAchievementSchema_target>("target", Target);
            writer.WriteIntValue("total", Total);
            writer.WriteEnumValue<global::Zeno.Artifacts.Shared.Client.Models.AchievementType>("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="DateTimeOffset"/>, <see cref="global::Zeno.Artifacts.Shared.Client.Models.AccountAchievementSchema_completed_atMember1"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class AccountAchievementSchema_completed_at : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Zeno.Artifacts.Shared.Client.Models.AccountAchievementSchema_completed_atMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Zeno.Artifacts.Shared.Client.Models.AccountAchievementSchema_completed_atMember1? AccountAchievementSchemaCompletedAtMember1 { get; set; }
#nullable restore
#else
            public global::Zeno.Artifacts.Shared.Client.Models.AccountAchievementSchema_completed_atMember1 AccountAchievementSchemaCompletedAtMember1 { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="DateTimeOffset"/></summary>
            public DateTimeOffset? DateTimeOffset { get; set; }
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Zeno.Artifacts.Shared.Client.Models.AccountAchievementSchema.AccountAchievementSchema_completed_at"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Zeno.Artifacts.Shared.Client.Models.AccountAchievementSchema.AccountAchievementSchema_completed_at CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Zeno.Artifacts.Shared.Client.Models.AccountAchievementSchema.AccountAchievementSchema_completed_at();
                if(parseNode.GetDateTimeOffsetValue() is DateTimeOffset dateTimeOffsetValue)
                {
                    result.DateTimeOffset = dateTimeOffsetValue;
                }
                else {
                    result.AccountAchievementSchemaCompletedAtMember1 = new global::Zeno.Artifacts.Shared.Client.Models.AccountAchievementSchema_completed_atMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(AccountAchievementSchemaCompletedAtMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(AccountAchievementSchemaCompletedAtMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(DateTimeOffset != null)
                {
                    writer.WriteDateTimeOffsetValue(null, DateTimeOffset);
                }
                else {
                    writer.WriteObjectValue<global::Zeno.Artifacts.Shared.Client.Models.AccountAchievementSchema_completed_atMember1>(null, AccountAchievementSchemaCompletedAtMember1);
                }
            }
        }
        /// <summary>
        /// Composed type wrapper for classes <see cref="global::Zeno.Artifacts.Shared.Client.Models.AccountAchievementSchema_targetMember1"/>, <see cref="string"/>
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class AccountAchievementSchema_target : IComposedTypeWrapper, IParsable
        {
            /// <summary>Composed type representation for type <see cref="global::Zeno.Artifacts.Shared.Client.Models.AccountAchievementSchema_targetMember1"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public global::Zeno.Artifacts.Shared.Client.Models.AccountAchievementSchema_targetMember1? AccountAchievementSchemaTargetMember1 { get; set; }
#nullable restore
#else
            public global::Zeno.Artifacts.Shared.Client.Models.AccountAchievementSchema_targetMember1 AccountAchievementSchemaTargetMember1 { get; set; }
#endif
            /// <summary>Composed type representation for type <see cref="string"/></summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public string? String { get; set; }
#nullable restore
#else
            public string String { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <returns>A <see cref="global::Zeno.Artifacts.Shared.Client.Models.AccountAchievementSchema.AccountAchievementSchema_target"/></returns>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static global::Zeno.Artifacts.Shared.Client.Models.AccountAchievementSchema.AccountAchievementSchema_target CreateFromDiscriminatorValue(IParseNode parseNode)
            {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var result = new global::Zeno.Artifacts.Shared.Client.Models.AccountAchievementSchema.AccountAchievementSchema_target();
                if(parseNode.GetStringValue() is string stringValue)
                {
                    result.String = stringValue;
                }
                else {
                    result.AccountAchievementSchemaTargetMember1 = new global::Zeno.Artifacts.Shared.Client.Models.AccountAchievementSchema_targetMember1();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
            {
                if(AccountAchievementSchemaTargetMember1 != null)
                {
                    return ParseNodeHelper.MergeDeserializersForIntersectionWrapper(AccountAchievementSchemaTargetMember1);
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer)
            {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(String != null)
                {
                    writer.WriteStringValue(null, String);
                }
                else {
                    writer.WriteObjectValue<global::Zeno.Artifacts.Shared.Client.Models.AccountAchievementSchema_targetMember1>(null, AccountAchievementSchemaTargetMember1);
                }
            }
        }
    }
}
#pragma warning restore CS0618
